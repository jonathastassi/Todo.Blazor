@using todo.Models
@inject ICategoryService CategoryService
@inject IJSRuntime JS

@implements IFormBase<CategoryModel>

<Modal @ref="modal">
    <Title>@title</Title>
    <Content>

        <EditForm EditContext="@editContext" id="form" OnSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-12 form-group">
                    <label for="name">TÃ­tulo</label>
                    <InputText id="name" class="form-control" @bind-Value="category.Name" />
                </div>
                <div class="col-md-6 form-group">
                    <label for="createdAt">Criado em</label>
                    <InputDate id="createdAt" class="form-control" @bind-Value="category.CreatedAt"
                        @bind-Value:format="dd/MM/yyyy" />
                </div>
            </div>

        </EditForm>
    </Content>
    <Footer>
        <button type="submit" form="form" class="btn btn-primary">Salvar</button>
    </Footer>
</Modal>

@code {
    private EditContext editContext;
    private string title { get; set; }
    private Modal modal { get; set; }
    private CategoryModel category = new CategoryModel();

    @* [Parameter]
        public EventCallback OnClickCallback { get; set; } *@

    protected override void OnInitialized()
    {
        editContext = new EditContext(category);
    }

    public void Open(string title, CategoryModel model)
    {
        if (model == null)
        {
            model = new CategoryModel();
        }
        this.title = title;
        this.SetEntity(model);
        modal.Open();
        StateHasChanged();
    }

    private void SetEntity(CategoryModel category)
    {
        this.category.id = category.id;
        this.category.Name = category.Name;
        this.category.CreatedAt = category.CreatedAt;
    }

    public async Task HandleValidSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            if (this.category.id == 0)
            {
                await CategoryService.Post(category);
                await this.JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");
            }
            else
            {
                await CategoryService.Put(category.id, category);
                await this.JS.InvokeVoidAsync("alert", "Registro alterado com sucesso!");
            }
            @* await OnClickCallback.InvokeAsync(); *@
            modal.Close();
        }
    }

}