@page "/todo"
@attribute [Authorize]

@using todo.Models
@using Microsoft.JSInterop
@inject ITodoService TodoService
@inject IJSRuntime JS

<div class="header-title">
    <h2>Todo</h2>
    <button class="btn btn-link" @onclick="addTodo">Adicionar</button>
</div>

<table class="table table-hover table-striped">
    <thead>
        <tr>
            <th>Tarefa</th>
            <th>Done</th>
            <th>Criado em</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < todos.Count; i++)
        {
            var todo = todos[i];

            <tr>
                <td>@todo.Title</td>
                <td>@(todo.Done ? "Sim" : "Não")</td>
                <td>@todo.CreatedAt</td>
                <td style="width: 220px;">
                    <button class="btn btn-warning btn-sm" @onclick="@(() => EditItem(todo))">Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteItem(todo))">Excluir</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<Modal @ref="modal">
    <Title>@title</Title>
    <Content>

        <EditForm EditContext="@editContext" id="form" OnSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-12 form-group">
                    <label for="title">Título</label>
                    <InputText id="title" class="form-control" @bind-Value="todo.Title" />
                </div>
                <div class="col-md-6 form-group">
                    <label for="done">Concluído</label>
                    <InputCheckbox id="done" style="zoom: 2; display: block;" @bind-Value="todo.Done"/>
                </div>
                <div class="col-md-6 form-group">
                    <label for="createdAt">Criado em</label>
                    <InputDate id="createdAt" class="form-control" @bind-Value="todo.CreatedAt" @bind-Value:format="dd/MM/yyyy"/>
                </div>
            </div>


        </EditForm>

    </Content>
    <Footer>
        <button  type="submit" form="form" class="btn btn-primary">Salvar</button>
    </Footer>
</Modal>

@code {
    private Modal modal { get; set; }
    private string title { get; set; }
    private List<Todo> todos { get; set; } = new List<Todo>();

    private Todo todo = new Todo();

    private EditContext editContext;

    protected override void OnInitialized() 
    {
        editContext = new EditContext(todo);
    }

    protected override async Task OnInitializedAsync()
    {
        await getData();
    }

    private async Task getData()
    {
        todos = await TodoService.Get();        
    }

    public async Task DeleteItem(Todo todo)
    {
        var confirm = await this.JS.InvokeAsync<bool>("confirm", "Deseja excluir o registro selecionado?");

        if (confirm) {
            await TodoService.Delete(todo.id);
            await getData();            
            await this.JS.InvokeVoidAsync("alert", "Registro excluído com sucesso!");
        }
    }

    public void addTodo()
    {
       this.SetEntity(new Todo());

        title = "New Todo";
        modal.Open();
    }

    private void SetEntity(Todo todo) 
    {
        this.todo.id = todo.id;
        this.todo.Title = todo.Title;
        this.todo.Done = todo.Done;
        this.todo.CreatedAt = todo.CreatedAt;
    }

    public void EditItem(Todo todo) 
    {
       this.SetEntity(new Todo(todo.id, todo.Title, todo.Done, todo.CreatedAt));

        modal.Open();
    }

    public async Task HandleValidSubmit() 
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            if (this.todo.id == 0) 
            {
                await TodoService.Post(todo);
                await this.JS.InvokeVoidAsync("alert", "Registro salvo com sucesso!");  
            }
            else {
                await TodoService.Put(this.todo.id, todo);
                await this.JS.InvokeVoidAsync("alert", "Registro alterado com sucesso!");  
            }
            await getData();   
            modal.Close();       
        }
    }
}